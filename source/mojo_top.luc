module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal

  
  //ALU fsm tester
  //sig a[16];
  //sig b[16];
  //sig alufn_signal[6];
  //alu alu_unit;
  //alu_tester tester_unit;
  
 
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      
      game_miniBeta gameMachine;
    }
    
    reset_conditioner reset_cond;

    edge_detector edge_dt_btn_p1 (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_p2(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_p3(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_p4(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_p5(#RISE(1), #FALL(0));
    

    button_conditioner btn_cond_p1;
    button_conditioner btn_cond_p2;
    button_conditioner btn_cond_p3;
    button_conditioner btn_cond_p4;
    button_conditioner btn_cond_p5;
    

  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    //set all to zero
    io_led = 3x{{8h00}};    // turn LEDs off, using duplications
    io_seg = 8hff;          // turn segments off, setting to all 1 will turn it off
    io_sel = 4hf;           // select no digits

    btn_cond_p1.in=io_button[0]; //to reduce the bouncing effects of your button 
    btn_cond_p2.in=io_button[1];
    btn_cond_p3.in=io_button[2];
    btn_cond_p4.in=io_button[3];
    btn_cond_p5.in=io_button[4];
    edge_dt_btn_p1.in=btn_cond_p1.out; //get the edge of button press
    edge_dt_btn_p2.in=btn_cond_p2.out;
    edge_dt_btn_p3.in=btn_cond_p3.out;
    edge_dt_btn_p4.in=btn_cond_p4.out;
    edge_dt_btn_p5.in=btn_cond_p5.out;
    
    gameMachine.button1=edge_dt_btn_p1.out;
    gameMachine.button2=edge_dt_btn_p2.out;
    gameMachine.button3=edge_dt_btn_p3.out;
    gameMachine.button4=edge_dt_btn_p4.out;
    gameMachine.button5=edge_dt_btn_p5.out;
    
    //show the counter value at led   

    io_led[0] = gameMachine.outputled[7:0];    
    io_led[1] = gameMachine.outputled[15:8];
    io_led[2] = gameMachine.outputp1[7:0]; //for debug
    //io_led[2][7:4] = gameMachine.outputp2[3:0]; //for debug
    

    
    // ALU FSM tester
//   alufn_signal = io_dip[2][5:0];
//   a[7:0] = io_dip[0];
//   a[15:8] = 8b0;
//   b[15:8] = 8b0;
//   b[7:0] = io_dip[1];
//    tester_unit.clk = slowclock.value;
//    tester_unit.reset = rst;
    
//    alu_unit.a = a;
//    alu_unit.b = b;
//    alu_unit.alufn_signal = tester_unit.out;
    
 //   io_led[0] = a;
 //   io_led[1] = b;
 //   io_led[2] = alu_unit.out; //the output of the ALU

    
  }
}